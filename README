This file was created by IntelliJ IDEA 12.1.6 for binding GitHub repository

Mrs. Write has hired you to implement a simple line editor program to help her with her text processing needs. The line editor will have five menu choices (three of them will be implemented in methods):

Delete string (D). In this method, you will prompt for the index where you want to start deleting a string. You will also prompt for the index of the characters one past the last location to delete. Then use a standard StringBuilder method to help you complete the task and output the updated string. If a user type in an index that is longer than the length of your lineEditor, an exception will occur. Handle this exception by using “try and catch” clauses. Also, output the error message that the exception returns. In addition to that, output another message to explain that the segment of string has not been deleted due to error.  Hint: Read your textbook to find out which type of exception will occur and handle it. Look for clues in Common Programming Error box.

Set Upper Case (U). In this method, you will first prompt for the index of the character that you want to convert to upper case. You can make the assumption that the character will be within a-z or A-Z (the input will be a valid letter). You will have to check the character at the index to make sure that it is still in lower case. If that is the case, you will convert the lower case character to a upper case character and output the updated string. Otherwise, output a statement explaining that “The letter is already in upper case and no conversion is conducted.”  Hint: use methods from Character Class to assist you. Also, use the appropriate built-in StringBuilder method(s) to help you too. If a user type in an index that is longer than the length of your lineEditor, an exception will occur. Handle this exception by using “try and catch” clauses. Also, output the error message that the exception returns. In addition, output another message to explain that the lineEditor has not been updated due to error.  Hint: Read your textbook to find out which type of exception will occur and handle it. Look for clues in Common Programming Error box.

Count Words (C).  In this method, you will prompt for the target word and return the number of times the word occurs in the string. You can assume that each word is separated by a space “ “ (one space empty string, see Page 702). You can use the concept of tokenizing  string to implement this method. You may use a built in String method instead of StringBuilder method to help you. In order to do that, you will have to convert a StringBuilder object to a String object. Which method do you call? After you have determine the number of times the target word appeared in the string, write if-else statements to output two statements as shown in sample output. If the word is not found, output a statement to explain that. If the target word is found, state the number of times the word appeared in the sentence.

** Now, if you try to count “lamb”, you may discover there is a problem. Before you can even begin to tokenize the string, you should clean up your string. How do you do that? Clues will be given in class or you can use your creativity.

Each of these tasks should be implemented as a method that does not return any value nor accept any argument.  Each of your method should always show the content of the updated lineEditor if the operation is successful.